[4mGIT-BRANCH[24m(1)                                                                             Git Manual                                                                             [4mGIT-BRANCH[24m(1)

[1mNAME[0m
       git-branch - List, create, or delete branches

[1mSYNOPSIS[0m
       [4mgit[24m [4mbranch[24m [--color[=<when>] | --no-color] [--show-current]
               [-v [--abbrev=<n> | --no-abbrev]]
               [--column[=<options>] | --no-column] [--sort=<key>]
               [--merged [<commit>]] [--no-merged [<commit>]]
               [--contains [<commit>]] [--no-contains [<commit>]]
               [--points-at <object>] [--format=<format>]
               [(-r | --remotes) | (-a | --all)]
               [--list] [<pattern>...]
       [4mgit[24m [4mbranch[24m [--track[=(direct|inherit)] | --no-track] [-f]
               [--recurse-submodules] <branchname> [<start-point>]
       [4mgit[24m [4mbranch[24m (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]
       [4mgit[24m [4mbranch[24m --unset-upstream [<branchname>]
       [4mgit[24m [4mbranch[24m (-m | -M) [<oldbranch>] <newbranch>
       [4mgit[24m [4mbranch[24m (-c | -C) [<oldbranch>] <newbranch>
       [4mgit[24m [4mbranch[24m (-d | -D) [-r] <branchname>...
       [4mgit[24m [4mbranch[24m --edit-description [<branchname>]

[1mDESCRIPTION[0m
       If [1m--list [22mis given, or if there are no non-option arguments, existing branches are listed; the current branch will be highlighted in green and marked with an asterisk. Any branches
       checked out in linked worktrees will be highlighted in cyan and marked with a plus sign. Option [1m-r [22mcauses the remote-tracking branches to be listed, and option [1m-a [22mshows both local and
       remote branches.

       If a [4m<pattern>[24m is given, it is used as a shell wildcard to restrict the output to matching branches. If multiple patterns are given, a branch is shown if it matches any of the
       patterns.

       Note that when providing a [4m<pattern>[24m, you must use [1m--list[22m; otherwise the command may be interpreted as branch creation.

       With [1m--contains[22m, shows only the branches that contain the named commit (in other words, the branches whose tip commits are descendants of the named commit), [1m--no-contains [22minverts it.
       With [1m--merged[22m, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed. With [1m--no-merged [22monly branches not
       merged into the named commit will be listed. If the <commit> argument is missing it defaults to [1mHEAD [22m(i.e. the tip of the current branch).

       The command’s second form creates a new branch head named <branchname> which points to the current [1mHEAD[22m, or <start-point> if given. As a special case, for <start-point>, you may use
       "A[1m...B[22m" as a shortcut for the merge base of [1mA [22mand [1mB [22mif there is exactly one merge base. You can leave out at most one of [1mA [22mand [1mB[22m, in which case it defaults to [1mHEAD[22m.

       Note that this will create the new branch, but it will not switch the working tree to it; use "git switch <newbranch>" to switch to the new branch.

       When a local branch is started off a remote-tracking branch, Git sets up the branch (specifically the [1mbranch.[4m[22m<name>[24m[1m.remote [22mand [1mbranch.[4m[22m<name>[24m[1m.merge [22mconfiguration entries) so that [4mgit[0m
       [4mpull[24m will appropriately merge from the remote-tracking branch. This behavior may be changed via the global [1mbranch.autoSetupMerge [22mconfiguration flag. That setting can be overridden by
       using the [1m--track [22mand [1m--no-track [22moptions, and changed later using [1mgit branch --set-upstream-to[22m.

       With a [1m-m [22mor [1m-M [22moption, <oldbranch> will be renamed to <newbranch>. If <oldbranch> had a corresponding reflog, it is renamed to match <newbranch>, and a reflog entry is created to
       remember the branch renaming. If <newbranch> exists, -M must be used to force the rename to happen.

       The [1m-c [22mand [1m-C [22moptions have the exact same semantics as [1m-m [22mand [1m-M[22m, except instead of the branch being renamed, it will be copied to a new name, along with its config and reflog.

       With a [1m-d [22mor [1m-D [22moption, [4m<branchname>[24m will be deleted. You may specify more than one branch for deletion. If the branch currently has a reflog then the reflog will also be deleted.

       Use [1m-r [22mtogether with [1m-d [22mto delete remote-tracking branches. Note, that it only makes sense to delete remote-tracking branches if they no longer exist in the remote repository or if
       [4mgit[24m [4mfetch[24m was configured not to fetch them again. See also the [4mprune[24m subcommand of [1mgit-remote[22m(1) for a way to clean up all obsolete remote-tracking branches.

[1mOPTIONS[0m
       -d, --delete
           Delete a branch. The branch must be fully merged in its upstream branch, or in [1mHEAD [22mif no upstream was set with [1m--track [22mor [1m--set-upstream-to[22m.

       -D
           Shortcut for [1m--delete --force[22m.

       --create-reflog
           Create the branch’s reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as "<branchname>@{yesterday}". Note
           that in non-bare repositories, reflogs are usually enabled by default by the [1mcore.logAllRefUpdates [22mconfig option. The negated form [1m--no-create-reflog [22monly overrides an earlier
           [1m--create-reflog[22m, but currently does not negate the setting of [1mcore.logAllRefUpdates[22m.

       -f, --force
           Reset <branchname> to <start-point>, even if <branchname> exists already. Without [1m-f[22m, [4mgit[24m [4mbranch[24m refuses to change an existing branch. In combination with [1m-d [22m(or [1m--delete[22m), allow
           deleting the branch irrespective of its merged status, or whether it even points to a valid commit. In combination with [1m-m [22m(or [1m--move[22m), allow renaming the branch even if the new
           branch name already exists, the same applies for [1m-c [22m(or [1m--copy[22m).

           Note that [4mgit[24m [4mbranch[24m [4m-f[24m [4m<branchname>[24m [4m[<start-point>][24m, even with [4m-f[24m, refuses to change an existing branch [4m<branchname>[24m that is checked out in another worktree linked to the same
           repository.

       -m, --move
           Move/rename a branch, together with its config and reflog.

       -M
           Shortcut for [1m--move --force[22m.

       -c, --copy
           Copy a branch, together with its config and reflog.

       -C
           Shortcut for [1m--copy --force[22m.

       --color[=<when>]
           Color branches to highlight current, local, and remote-tracking branches. The value must be always (the default), never, or auto.

       --no-color
           Turn off branch colors, even when the configuration file gives the default to color output. Same as [1m--color=never[22m.

       -i, --ignore-case
           Sorting and filtering branches are case insensitive.

       --omit-empty
           Do not print a newline after formatted refs where the format expands to the empty string.

       --column[=<options>], --no-column
           Display branch listing in columns. See configuration variable [1mcolumn.branch [22mfor option syntax.  [1m--column [22mand [1m--no-column [22mwithout options are equivalent to [4malways[24m and [4mnever[0m
           respectively.

           This option is only applicable in non-verbose mode.

       -r, --remotes
           List or delete (if used with -d) the remote-tracking branches. Combine with [1m--list [22mto match the optional pattern(s).

       -a, --all
           List both remote-tracking branches and local branches. Combine with [1m--list [22mto match optional pattern(s).

       -l, --list
           List branches. With optional [4m<pattern>[24m..., e.g.  [1mgit branch --list [22m'maint-*', list only the branches that match the pattern(s).

       --show-current
           Print the name of the current branch. In detached HEAD state, nothing is printed.

       -v, -vv, --verbose
           When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the path of the linked worktree (if
           any) and the name of the upstream branch, as well (see also [1mgit remote show [4m[22m<remote>[24m). Note that the current worktree’s HEAD will not have its path printed (it will always be your
           current directory).

       -q, --quiet
           Be more quiet when creating or deleting a branch, suppressing non-error messages.

       --abbrev=<n>
           In the verbose listing that show the commit object name, show the shortest prefix that is at least [4m<n>[24m hexdigits long that uniquely refers the object. The default value is 7 and
           can be overridden by the [1mcore.abbrev [22mconfig option.

       --no-abbrev
           Display the full sha1s in the output listing rather than abbreviating them.

       -t, --track[=(direct|inherit)]
           When creating a new branch, set up [1mbranch.[4m[22m<name>[24m[1m.remote [22mand [1mbranch.[4m[22m<name>[24m[1m.merge [22mconfiguration entries to set "upstream" tracking configuration for the new branch. This
           configuration will tell git to show the relationship between the two branches in [1mgit status [22mand [1mgit branch -v[22m. Furthermore, it directs [1mgit pull [22mwithout arguments to pull from the
           upstream when the new branch is checked out.

           The exact upstream branch is chosen depending on the optional argument: [1m-t[22m, [1m--track[22m, or [1m--track=direct [22mmeans to use the start-point branch itself as the upstream; [1m--track=inherit[0m
           means to copy the upstream configuration of the start-point branch.

           The branch.autoSetupMerge configuration variable specifies how [1mgit switch[22m, [1mgit checkout [22mand [1mgit branch [22mshould behave when neither [1m--track [22mnor [1m--no-track [22mare specified:

           The default option, [1mtrue[22m, behaves as though [1m--track=direct [22mwere given whenever the start-point is a remote-tracking branch.  [1mfalse [22mbehaves as if [1m--no-track [22mwere given.  [1malways[0m
           behaves as though [1m--track=direct [22mwere given.  [1minherit [22mbehaves as though [1m--track=inherit [22mwere given.  [1msimple [22mbehaves as though [1m--track=direct [22mwere given only when the start-point
           is a remote-tracking branch and the new branch has the same name as the remote branch.

           See [1mgit-pull[22m(1) and [1mgit-config[22m(1) for additional discussion on how the [1mbranch.[4m[22m<name>[24m[1m.remote [22mand [1mbranch.[4m[22m<name>[24m[1m.merge [22moptions are used.

       --no-track
           Do not set up "upstream" configuration, even if the branch.autoSetupMerge configuration variable is set.

       --recurse-submodules
           THIS OPTION IS EXPERIMENTAL! Causes the current command to recurse into submodules if [1msubmodule.propagateBranches [22mis enabled. See [1msubmodule.propagateBranches [22min [1mgit-config[22m(1).
           Currently, only branch creation is supported.

           When used in branch creation, a new branch <branchname> will be created in the superproject and all of the submodules in the superproject’s <start-point>. In submodules, the
           branch will point to the submodule commit in the superproject’s <start-point> but the branch’s tracking information will be set up based on the submodule’s branches and remotes
           e.g.  [1mgit branch --recurse-submodules topic origin/main [22mwill create the submodule branch "topic" that points to the submodule commit in the superproject’s "origin/main", but
           tracks the submodule’s "origin/main".

       --set-upstream
           As this option had confusing syntax, it is no longer supported. Please use [1m--track [22mor [1m--set-upstream-to [22minstead.

       -u <upstream>, --set-upstream-to=<upstream>
           Set up <branchname>'s tracking information so <upstream> is considered <branchname>'s upstream branch. If no <branchname> is specified, then it defaults to the current branch.

       --unset-upstream
           Remove the upstream information for <branchname>. If no branch is specified it defaults to the current branch.

       --edit-description
           Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g.  [1mformat-patch[22m, [1mrequest-pull[22m, and [1mmerge [22m(if enabled)). Multi-line
           explanations may be used.

       --contains [<commit>]
           Only list branches which contain the specified commit (HEAD if not specified). Implies [1m--list[22m.

       --no-contains [<commit>]
           Only list branches which don’t contain the specified commit (HEAD if not specified). Implies [1m--list[22m.

       --merged [<commit>]
           Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies [1m--list[22m.

       --no-merged [<commit>]
           Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies [1m--list[22m.

       <branchname>
           The name of the branch to create or delete. The new branch name must pass all checks defined by [1mgit-check-ref-format[22m(1). Some of these checks may restrict the characters allowed
           in a branch name.

       <start-point>
           The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.

       <oldbranch>
           The name of an existing branch. If this option is omitted, the name of the current branch will be used instead.

       <newbranch>
           The new name for an existing branch. The same restrictions as for <branchname> apply.

       --sort=<key>
           Sort based on the key given. Prefix [1m- [22mto sort in descending order of the value. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary
           key. The keys supported are the same as those in [1mgit for-each-ref[22m. Sort order defaults to the value configured for the [1mbranch.sort [22mvariable if it exists, or to sorting based on
           the full refname (including [1mrefs/..[22m. prefix). This lists detached HEAD (if present) first, then local branches and finally remote-tracking branches. See [1mgit-config[22m(1).

       --points-at <object>
           Only list branches of the given object.

       --format <format>
           A string that interpolates %([1mfieldname[22m) from a branch ref being shown and the object it points at. The format is the same as that of [1mgit-for-each-ref[22m(1).

[1mCONFIGURATION[0m
       [1mpager.branch [22mis only respected when listing branches, i.e., when [1m--list [22mis used or implied. The default is to use a pager. See [1mgit-config[22m(1).

       Everything above this line in this section isn’t included from the [1mgit-config[22m(1) documentation. The content that follows is the same as what’s found there:

       branch.autoSetupMerge
           Tells [4mgit[24m [4mbranch[24m, [4mgit[24m [4mswitch[24m and [4mgit[24m [4mcheckout[24m to set up new branches so that [1mgit-pull[22m(1) will appropriately merge from the starting point branch. Note that even if this option is
           not set, this behavior can be chosen per-branch using the [1m--track [22mand [1m--no-track [22moptions. The valid settings are: [1mfalse [22m— no automatic setup is done; [1mtrue [22m— automatic setup is
           done when the starting point is a remote-tracking branch; [1malways [22m— automatic setup is done when the starting point is either a local branch or remote-tracking branch; [1minherit [22m— if
           the starting point has a tracking configuration, it is copied to the new branch; [1msimple [22m— automatic setup is done only when the starting point is a remote-tracking branch and the
           new branch has the same name as the remote branch. This option defaults to true.

       branch.autoSetupRebase
           When a new branch is created with [4mgit[24m [4mbranch[24m, [4mgit[24m [4mswitch[24m or [4mgit[24m [4mcheckout[24m that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see
           "branch.<name>.rebase"). When [1mnever[22m, rebase is never automatically set to true. When [1mlocal[22m, rebase is set to true for tracked branches of other local branches. When [1mremote[22m, rebase
           is set to true for tracked branches of remote-tracking branches. When [1malways[22m, rebase will be set to true for all tracking branches. See "branch.autoSetupMerge" for details on how
           to set up a branch to track another branch. This option defaults to never.

       branch.sort
           This variable controls the sort ordering of branches when displayed by [1mgit-branch[22m(1). Without the "--sort=<value>" option provided, the value of this variable will be used as the
           default. See [1mgit-for-each-ref[22m(1) field names for valid values.

       branch.<name>.remote
           When on branch <name>, it tells [4mgit[24m [4mfetch[24m and [4mgit[24m [4mpush[24m which remote to fetch from or push to. The remote to push to may be overridden with [1mremote.pushDefault [22m(for all branches).
           The remote to push to, for the current branch, may be further overridden by [1mbranch.[4m[22m<name>[24m[1m.pushRemote[22m. If no remote is configured, or if you are not on any branch and there is more
           than one remote defined in the repository, it defaults to [1morigin [22mfor fetching and [1mremote.pushDefault [22mfor pushing. Additionally, . (a period) is the current local repository (a
           dot-repository), see [1mbranch.[4m[22m<name>[24m[1m.merge[22m's final note below.

       branch.<name>.pushRemote
           When on branch <name>, it overrides [1mbranch.[4m[22m<name>[24m[1m.remote [22mfor pushing. It also overrides [1mremote.pushDefault [22mfor pushing from branch <name>. When you pull from one place (e.g. your
           upstream) and push to another place (e.g. your own publishing repository), you would want to set [1mremote.pushDefault [22mto specify the remote to push to for all branches, and use this
           option to override it for a specific branch.

       branch.<name>.merge
           Defines, together with branch.<name>.remote, the upstream branch for the given branch. It tells [4mgit[24m [4mfetch[24m/[4mgit[24m [4mpull[24m/[4mgit[24m [4mrebase[24m which branch to merge and can also affect [4mgit[24m [4mpush[0m
           (see push.default). When in branch <name>, it tells [4mgit[24m [4mfetch[24m the default refspec to be marked for merging in FETCH_HEAD. The value is handled like the remote part of a refspec,
           and must match a ref which is fetched from the remote given by "branch.<name>.remote". The merge information is used by [4mgit[24m [4mpull[24m (which first calls [4mgit[24m [4mfetch[24m) to lookup the
           default branch for merging. Without this option, [4mgit[24m [4mpull[24m defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup [4mgit[0m
           [4mpull[24m so that it merges into <name> from another branch in the local repository, you can point branch.<name>.merge to the desired branch, and use the relative path setting . (a
           period) for branch.<name>.remote.

       branch.<name>.mergeOptions
           Sets default options for merging into branch <name>. The syntax and supported options are the same as those of [1mgit-merge[22m(1), but option values containing whitespace characters are
           currently not supported.

       branch.<name>.rebase
           When true, rebase the branch <name> on top of the fetched branch, instead of merging the default branch from the default remote when "git pull" is run. See "pull.rebase" for doing
           this in a non branch-specific manner.

           When [1mmerges [22m(or just [4mm[24m), pass the [1m--rebase-merges [22moption to [4mgit[24m [4mrebase[24m so that the local merge commits are included in the rebase (see [1mgit-rebase[22m(1) for details).

           When the value is [1minteractive [22m(or just [4mi[24m), the rebase is run in interactive mode.

           [1mNOTE[22m: this is a possibly dangerous operation; do [1mnot [22muse it unless you understand the implications (see [1mgit-rebase[22m(1) for details).

       branch.<name>.description
           Branch description, can be edited with [1mgit branch --edit-description[22m. Branch description is automatically added to the format-patch cover letter or request-pull summary.

[1mEXAMPLES[0m
       Start development from a known tag

               $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
               $ cd my2.6
               $ git branch my2.6.14 v2.6.14   [1m(1)[0m
               $ git switch my2.6.14
            [1m1. [22mThis step and the next one could be combined into a single step with "checkout -b my2.6.14 v2.6.14".

       Delete an unneeded branch

               $ git clone git://git.kernel.org/.../git.git my.git
               $ cd my.git
               $ git branch -d -r origin/todo origin/html origin/man   [1m(1)[0m
               $ git branch -D test                                    [1m(2)[0m
            [1m1. [22mDelete the remote-tracking branches "todo", "html" and "man". The next [4mfetch[24m or [4mpull[24m will create them again unless you configure them not to.
               See [1mgit-fetch[22m(1).
            [1m2. [22mDelete the "test" branch even if the "master" branch (or whichever branch is currently checked out) does not have all commits from the test
               branch.

       Listing branches from a specific remote

               $ git branch -r -l '<remote>/<pattern>'                 [1m(1)[0m
               $ git for-each-ref 'refs/remotes/<remote>/<pattern>'    [1m(2)[0m
            [1m1. [22mUsing [1m-a [22mwould conflate <remote> with any local branches you happen to have been prefixed with the same <remote> pattern.
            [1m2. for-each-ref [22mcan take a wide range of options. See [1mgit-for-each-ref[22m(1)

       Patterns will normally need quoting.

[1mNOTES[0m
       If you are creating a branch that you want to switch to immediately, it is easier to use the "git switch" command with its [1m-c [22moption to do the same thing with a single command.

       The options [1m--contains[22m, [1m--no-contains[22m, [1m--merged [22mand [1m--no-merged [22mserve four related but different purposes:

       •   [1m--contains [4m[22m<commit>[24m is used to find all branches which will need special attention if <commit> were to be rebased or amended, since those branches contain the specified <commit>.

       •   [1m--no-contains [4m[22m<commit>[24m is the inverse of that, i.e. branches that don’t contain the specified <commit>.

       •   [1m--merged [22mis used to find all branches which can be safely deleted, since those branches are fully contained by HEAD.

       •   [1m--no-merged [22mis used to find branches which are candidates for merging into HEAD, since those branches are not fully contained by HEAD.

       When combining multiple [1m--contains [22mand [1m--no-contains [22mfilters, only references that contain at least one of the [1m--contains [22mcommits and contain none of the [1m--no-contains [22mcommits are
       shown.

       When combining multiple [1m--merged [22mand [1m--no-merged [22mfilters, only references that are reachable from at least one of the [1m--merged [22mcommits and from none of the [1m--no-merged [22mcommits are
       shown.

[1mSEE ALSO[0m
       [1mgit-check-ref-format[22m(1), [1mgit-fetch[22m(1), [1mgit-remote[22m(1), [34m[1m“Understanding history: What is a branch?”[0m[1m[22m[1] in the Git User’s Manual.

[1mGIT[0m
       Part of the [1mgit[22m(1) suite

[1mNOTES[0m
        1. “Understanding history: What is a branch?”
           file:///usr/share/doc/git/user-manual.html#what-is-a-branch

Git 2.48.1                                                                                01/13/2025                                                                             [4mGIT-BRANCH[24m(1)
